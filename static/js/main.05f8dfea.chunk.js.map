{"version":3,"sources":["logomark.svg","components/TradesTable.jsx","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Table","_ref","trades","onChangeFilter","react_default","a","createElement","className","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","type","placeholder","onChange","map","title","key","trade","concat","timestamp","trade_price","style","color","trade_type","symbol","trade_location","quote_region","trade_strategy","CONSTANTS","getSymbolFromCurrency","getRandomInt","Math","floor","random","getQuoteStreamTopicName","name","convertTimestampToDate","unixTime","parseFloat","date","Date","toUTCString","index","indexOf","substring","trim","makeChartData","response","oldData","close","ma","newChart","_","cloneDeep","push","time","lastIndexOf","substr","convertToDecimal","val","num","toString","includes","makeCollectionData","data","newData","Object","objectSpread","undefined","CHART1","CHART2","CHART3","BACKGROUND","App","props","_this$state","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","width","height","defineProperty","stream","updateWindowDimensions","bind","assertThisInitialized","establishConnection","handleClose","openSnackBar","handleSearchTextChange","jwtToken","fabric","collection","window","addEventListener","_this2","removeEventListener","forEach","chartNum","closeConnections","closeOnChangeConnection","charts","i","length","setState","_this$setState","getDocumentData","establishDocumentConnection","selectedRegionUrl","email","password","fabricName","Fabric","login","useFabric","initData","console","log","_context2","t0","federationUrl","res","get","deployedRegions","regions","options","dcList","split","tenantHandler","tenant","getTenantEdgeLocations","locations","dcInfo","availableRegions","filter","dcObject","regionModal","_context3","query","cursor","all","result","collectionData","dataArr","_context4","status","consumer","on","_this3","msg","receiveMsg","JSON","parse","payload","decodedMsg","atob","toConsumableArray","newElem","slice","streamTopic","getOtp","consumerOTP","otp","_this4","innerWidth","innerHeight","showSnackbar","snackbarText","message","_this5","setTimeout","event","text","target","value","filterResults","_this6","showFiltered","filteredData","upperCaseText","toUpperCase","heading","subheading","priceLabel","_this$state$chartNum","price","priceInDecimal","X","chartLayout","margin","t","b","l","r","pad","font","size","showlegend","paper_bgcolor","plot_bgcolor","xaxis","showticklabels","tickfont","showgrid","gridcolor","fixedrange","zerolinecolor","yaxis","chartData","x","y","marker","react_plotly_default","layout","useResizeHandler","config","displayModeBar","_this7","_this$state4","Dialog_default","fullWidth","open","DialogTitle_default","id","DialogContent_default","RadioGroup_default","_event$target","labels","selectedRegionName","outerText","region","_region$locationInfo","locationInfo","city","countrycode","url","tags","label","FormControlLabel_default","control","Radio_default","DialogActions_default","Button_default","disabled","onClick","selectedRegionLogin","variant","_this8","loginModal","classes","display","flexDirection","maxWidth","TextField_default","InputProps","input","defaultValue","_this9","_this$state5","src","Logomark","alt","renderCharts","TradesTable","Snackbar_default","onClose","renderLoginModal","renderRegionModal","Component","withStyles","theme","root","backgroundColor","marginLeft","spacing","unit","marginRight","tableHead","tableBody","headCell","fontSize","textAlign","borderBottom","tableCell","fontWeight","paddingLeft","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05f8dfea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logomark.fa69dc67.svg\";","import React from \"react\";\n\nfunction Table({ trades, onChangeFilter }) {\n  const titles = [\n    \"type\",\n    \"symbol\",\n    \"price\",\n    \"location\",\n    \"region\",\n    \"strategy\",\n    \"timestamp\",\n  ];\n\n  return (\n    <div className=\"h-full border border-mm-gray-600 overflow-x-auto overflow-y-hidden rounded-lg scrollbar text-white\">\n      <table className=\"w-full text-center\">\n        <caption className=\"text-left\">\n          {/* Trades filter */}\n          <label className=\"inline-flex items-center justify-center p-[11px] 3xl:p-[16px] 8xl:p-[24px] focus-within:text-white font-semibold text-mm-gray-400\">\n            {/* plus-circle svg icon */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"w-[13px] h-[13px] 3xl:w-[20px] 3xl:h-[20px] 8xl:w-[30px] 8xl:h-[30px]\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n\n            <input\n              className=\"w-full bg-transparent focus:outline-none leading-[16px] 3xl:leading-[24px] 8xl:leading-[36px] pl-[7px] 3xl:pl-[10px] 8xl:pl-[15px] text-[11px] 3xl:text-[16px] 8xl:text-[24px]\"\n              type=\"text\"\n              placeholder=\"Add a filter\"\n              onChange={onChangeFilter}\n            />\n          </label>\n        </caption>\n        <thead className=\"sticky top-0\">\n          <tr className=\"bg-mm-gray-800 leading-[21px] 3xl:leading-[32px] 8xl:leading-[48px] text-[12px] 3xl:text-[18px] 8xl:text-[27px]\">\n            {titles.map((title) => (\n              <th className=\"py-[8px] 3xl:py-[12px] 8xl:py-[18px] uppercase\" key={title}>\n                {title}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {trades.map((trade) => {\n            return (\n              <tr\n                key={`${trade.timestamp}-${trade.trade_price}`}\n                className=\"bg-mm-gray-800/60 border-y border-mm-gray-600 leading-[21px] 3xl:leading-[32px] 8xl:leading-[48px] text-[12px] 3xl:text-[18px] 8xl:text-[27px]\"\n                style={{ color: trade.trade_type === \"SELL\" ? \"#F6E05E\" : \"#68D391\" }}\n              >\n                <td className=\"font-extrabold py-[11px] 3xl:py-[16px] 8xl:py-[24px]\">{trade.trade_type}</td>\n                <td className=\"font-medium py-[11px] 3xl:py-[16px] 8xl:py-[24px]\">{trade.symbol}</td>\n                <td className=\"font-semibold font-source-code-pro py-[11px] 3xl:py-[16px] 8xl:py-[24px] text-[14px] 3xl:text-[21px] 8xl:text-[32px]\">\n                  {trade.trade_price}\n                </td>\n                <td className=\"font-medium py-[11px] 3xl:py-[16px] 8xl:py-[24px]\">{trade.trade_location}</td>\n                <td className=\"font-medium py-[11px] 3xl:py-[16px] 8xl:py-[24px]\">{trade.quote_region}</td>\n                <td className=\"font-medium py-[11px] 3xl:py-[16px] 8xl:py-[24px]\">{trade.trade_strategy}</td>\n                <td className=\"font-semibold font-source-code-pro py-[11px] 3xl:py-[16px] text-[14px] 3xl:text-[21px] 8xl:text-[32px]\">\n                  {trade.timestamp}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport _ from 'lodash';\nimport getSymbolFromCurrency from 'currency-symbol-map';\nimport './App.css';\n\n\nexport const CONSTANTS = {\n    CHART1: 0,\n    CHART2: 1,\n    CHART3: 2,\n    BLUE: '#3B9DE6',\n    GREEN: '#A7CC55',\n    BACKGROUND: '#262626'\n};\n\nconst CHART_SIGNS = {\n    CHART1_SIGN:\n        getSymbolFromCurrency('USD'),\n    CHART2_SIGN:\n        getSymbolFromCurrency('EUR'),\n    CHART3_SIGN:\n        getSymbolFromCurrency('JPY')\n}\n\nexport function getRandomInt() {\n\n    return Math.floor(Math.random() * Math.floor(99999));\n\n}\n\nexport const getQuoteStreamTopicName = name => `CryptoTraderQuotesAvg${name}New`;\nexport const getCollectionName = () => 'trades';\n\nconst convertTimestampToDate = (timestamp) => {\n    let unixTime = (typeof timestamp === 'string') ? parseFloat(timestamp) : timestamp;\n    const date = new Date(unixTime * 1000).toUTCString();\n    const index = date.indexOf(\"GMT\");\n    const finalDate = date.substring(0, index).trim();\n    return finalDate;\n};\n\nexport const convertTimestampToProperTime = (timestamp) => {\n    const date = convertTimestampToDate(timestamp);\n    const index = date.lastIndexOf(' ');\n    return date.substr(index).trim();\n}\n\nexport const makeChartData = (response, oldData) => {\n    const { close, ma, timestamp } = response;\n    const newChart = _.cloneDeep(oldData);\n    newChart.close.push(close);\n    newChart.ma.push(ma);\n    const time = convertTimestampToDate(timestamp);\n    const index = time.lastIndexOf(' ');\n    newChart.timestamp.push(time.substr(index).trim());\n    return newChart;\n}\n\n\nexport const getChartData = (X, Y1, Y2) => {\n    //make traces\n    const trace1 = {\n        x: X,\n        y: Y1,\n        type: 'line',\n        marker: { color: CONSTANTS.BLUE },\n        name: 'ma'\n    }\n\n    const trace2 = {\n        x: X,\n        y: Y2,\n        type: 'line',\n        marker: { color: 'orange' },\n        name: 'price'\n    }\n\n    return [trace1, trace2];\n}\n\nexport const convertToDecimal = (val) => {\n    const num = typeof val === 'string' ? val : val.toString();\n    const decimalRepresentation = num.includes('.') ? num : `${num}.00`;\n    return decimalRepresentation;\n}\n\nexport const getCurrentValue = (chartNum, currVal) => {\n\n    const { CHART1, CHART2 } = CONSTANTS;\n\n    let currentValue;\n    const decimalValue = convertToDecimal(currVal);\n    switch (chartNum) {\n        case CHART1:\n            currentValue = `${CHART_SIGNS.CHART1_SIGN}${decimalValue}`;\n            break;\n        case CHART2:\n            currentValue = `${CHART_SIGNS.CHART2_SIGN}${decimalValue}`;\n            break;\n        default:\n            currentValue = `${CHART_SIGNS.CHART3_SIGN}${decimalValue}`\n            break;\n    }\n\n    return (\n        <span key={chartNum} style={{ display: 'flex', justifyContent: 'space-around' }}>\n            <span className=\"currentValue\">Current Value</span>\n            <span className=\"currentValueText\">{currentValue}</span>\n        </span>\n    )\n}\n\nexport const makeCollectionData = (data) => {\n    let newData = { ...data };\n    let trade_location;\n    const { symbol } = newData;\n    if (symbol) {\n        if (symbol.includes(\"JPY\")) {\n            trade_location = \"Tokyo\";\n        } else if (symbol.includes(\"USD\")) {\n            trade_location = \"NYC\";\n        } else {\n            trade_location = \"Frankfurt\";\n        }\n        newData.trade_location = trade_location;\n        newData.trade_price = convertToDecimal(newData.trade_price);\n        newData.timestamp = convertTimestampToProperTime(newData.timestamp);\n    }\n    else {\n        newData = undefined;\n    }\n    return newData;\n}\n\nexport const makeCollectionArray = (dataArr) => {\n    const newDataArr = dataArr.map(makeCollectionData);\n    return newDataArr;\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\nimport _ from 'lodash';\nimport Fabric from 'jsc8';\n\nimport TradesTable from \"./components/TradesTable\"\nimport Logomark from \"./logomark.svg\"\nimport {\n  convertToDecimal,\n  makeChartData,\n  getChartData,\n  makeCollectionArray,\n  makeCollectionData,\n  CONSTANTS,\n  getQuoteStreamTopicName,\n  getCollectionName,\n  getRandomInt\n} from './utils';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst { CHART1, CHART2, CHART3, BACKGROUND } = CONSTANTS;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      [CHART1]: {\n        name: 'USD',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      [CHART2]: {\n        name: 'EUR',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      [CHART3]: {\n        name: 'JPY',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      collectionData: [],\n      filteredData: [],\n      showSnackbar: false,\n      snackbarText: '',\n      showFiltered: false,\n      regionModal: false,\n      availableRegions: null,\n      selectedRegionUrl: null,\n      loginModal: true,\n      federationUrl: \"play.macrometa.io\",\n      fabric: 'crypto_trading_bot',\n      email: \"demo@macrometa.io\",\n      password: 'xxxx',\n      selectedRegionName: null\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.establishConnection = this.establishConnection.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.openSnackBar = this.openSnackBar.bind(this);\n    this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n    this.jwtToken = undefined;\n    this.fabric = undefined;\n    this.collection = undefined;\n  }\n\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions)\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n\n    [CHART1, CHART2, CHART3].forEach(chartNum => {\n      this.state[chartNum].stream.closeConnections();\n    });\n\n    this.collection.closeOnChangeConnection();\n\n  }\n\n  async initData() {\n    let charts = [CHART1, CHART2, CHART3];\n    for (let i = 0; i < charts.length; i++) {\n      charts[i] = await this.establishConnection(i);\n    }\n\n    this.setState({\n      [CHART1]: charts[CHART1],\n      [CHART2]: charts[CHART2],\n      [CHART3]: charts[CHART3]\n    });\n    this.getDocumentData();\n    this.establishDocumentConnection();\n  }\n\n  async selectedRegionLogin() {\n    this.fabric.close();\n    const { selectedRegionUrl, email, password } = this.state;\n    const fabricName = this.state.fabric;\n    this.fabric = new Fabric(`https://${selectedRegionUrl}`);\n    try {\n      await this.fabric.login(email, password);\n      this.fabric.useFabric(fabricName);\n      // start streams and get collection data\n      await this.initData();\n    } catch (e) {\n      this.openSnackBar('Failed to login with selected region.');\n      console.log(e);\n    }\n  }\n\n  async login() {\n    const { federationUrl, email, password } = this.state;\n    const fabricName = this.state.fabric;\n    this.fabric = new Fabric(`https://${federationUrl}`);\n    try {\n      const res = await this.fabric.login(email, password);\n      this.fabric.useFabric(fabricName);\n      const deployedRegions = await this.fabric.get();\n      const regions = deployedRegions.options.dcList.split(\",\");\n      const tenantHandler = this.fabric.tenant(\"\", res.tenant);\n      const locations = await tenantHandler.getTenantEdgeLocations();\n      const { dcInfo } = locations[0];\n      const availableRegions = dcInfo.filter((dcObject) => {\n        return regions.indexOf(dcObject.name > -1);\n      })\n      // const tempAvailableRegions = availableRegions.filter(\n      //   (availableRegion) => availableRegion.name !== \"gdn1-sfo2\"\n      // );\n\n      this.setState({\n        availableRegions,\n        regionModal: true,\n      });\n    } catch (e) {\n      this.openSnackBar('Auth failed.');\n      console.log(e);\n    }\n  }\n\n  async getDocumentData() {\n    try {\n      const cursor = await this.fabric.query(\"FOR trade IN trades SORT trade.timestamp DESC LIMIT 20 RETURN trade\");\n      const result = await cursor.all();\n      this.setState({ collectionData: makeCollectionArray(result) });\n    } catch (e) {\n      e.status !== 404 && this.openSnackBar('Could not get document data');\n    }\n\n  }\n\n  async establishDocumentConnection() {\n\n    const collectionName = getCollectionName();\n    this.collection = this.fabric.collection(collectionName);\n    const consumer = await this.collection.onChange(\n      this.state.selectedRegionUrl,\n      `${collectionName}-sub${getRandomInt()}`\n    );\n\n    consumer.on(\"error\", () => {\n      this.openSnackBar('Failed to establish WS connection for trades');\n      console.log('Failed to establish WS connection for trades');\n    });\n\n    consumer.on(\"message\", (msg) => {\n      const receiveMsg = JSON.parse(msg);\n        const { payload } = receiveMsg;\n        if (receiveMsg && payload) {\n          const decodedMsg = atob(payload);\n          const response = decodedMsg && JSON.parse(decodedMsg);\n          let collectionData = [...this.state.collectionData];\n          const newElem = makeCollectionData(response);\n          if (newElem) {\n            collectionData = [newElem, ...collectionData];\n          }\n          if (collectionData.length > 20) {\n            //remove more than 20 data points\n            collectionData = collectionData.slice(0, 20);\n          }\n          this.setState({ collectionData });\n        }\n    });\n\n    consumer.on(\"close\", () => {\n      console.log('Closing WS connection for trades');\n    });\n\n    consumer.on(\"open\", () => {\n      console.log(\"WebSocket is open for trades\");\n    });\n\n    // this.collection.onChange({\n    //   onopen: () => console.log(\"WebSocket is open for trades\"),\n    //   onclose: () => console.log('Closing WS connection for trades'),\n    //   onerror: () => {\n    //     this.openSnackBar('Failed to establish WS connection for trades');\n    //     console.log('Failed to establish WS connection for trades');\n    //   },\n    //   onmessage: message => {\n    //     const receiveMsg = JSON.parse(message);\n    //     const { payload } = receiveMsg;\n    //     if (receiveMsg && payload) {\n    //       const decodedMsg = atob(payload);\n    //       const response = decodedMsg && JSON.parse(decodedMsg);\n    //       let collectionData = [...this.state.collectionData];\n    //       const newElem = makeCollectionData(response);\n    //       if (newElem) {\n    //         collectionData = [newElem, ...collectionData];\n    //       }\n    //       if (collectionData.length > 20) {\n    //         //remove more than 20 data points\n    //         collectionData = collectionData.slice(0, 20);\n    //       }\n    //       this.setState({ collectionData });\n    //     }\n\n\n    //   }\n    // }, this.state.selectedRegionUrl, `${collectionName}-sub${getRandomInt()}`);\n  }\n\n  async establishConnection(chartNum) {\n    const newChart = _.cloneDeep(this.state[chartNum]);\n    const { name } = this.state[chartNum];\n    const streamTopic = getQuoteStreamTopicName(name);\n    const stream = this.fabric.stream(streamTopic, false);\n    const consumerOTP = await stream.getOtp();\n    const consumer = stream.consumer(`${name}-sub${getRandomInt()}`,\n      this.state.selectedRegionUrl, {\n        otp: consumerOTP,\n      });\n\n    consumer.on(\"error\", () => {\n      this.openSnackBar('Failed to establish WS connection');\n      console.log(`Failed to establish WS connection for ${streamTopic}`);\n    });\n\n    consumer.on(\"message\", (msg) => {\n      const receiveMsg = JSON.parse(msg);\n      const { payload } = receiveMsg;\n      if (receiveMsg && payload) {\n        const decodedMsg = atob(payload);\n        const response = decodedMsg && JSON.parse(decodedMsg);\n        console.log(\"CHART CONSUMER MSG:\", response);\n        this.setState({ [chartNum]: makeChartData(response, this.state[chartNum]) });\n      }\n    });\n\n    consumer.on(\"close\", () => {\n      console.log(`Closing WS connection for ${streamTopic}`)\n    });\n\n    consumer.on(\"open\", () => {\n      console.log(`Connection open for ${streamTopic}`)\n    });\n\n    /*\n    stream.consumer(`${name}-sub${getRandomInt()}`,this.state.selectedRegionUrl, {\n      onerror: () => {\n        this.openSnackBar('Failed to establish WS connection');\n        console.log(`Failed to establish WS connection for ${streamTopic}`);\n      },\n      onclose: () => console.log(`Closing WS connection for ${streamTopic}`),\n      onopen: () => console.log(`Connection open for ${streamTopic}`),\n      onmessage: (message) => {\n        const receiveMsg = JSON.parse(message);\n        const { payload } = receiveMsg;\n        if (receiveMsg && payload) {\n          const decodedMsg = atob(payload);\n          const response = decodedMsg && JSON.parse(decodedMsg);\n          console.log(\"CHART CONSUMER MSG:\", response);\n          this.setState({ [chartNum]: makeChartData(response, this.state[chartNum]) });\n        }\n      }\n    })*/;\n\n    newChart.stream = stream;\n\n    return newChart;\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  handleClose() {\n    this.setState({ showSnackbar: false, snackbarText: '' });\n  }\n\n  openSnackBar(message) {\n    this.setState({ showSnackbar: true, snackbarText: message }, () => {\n      setTimeout(this.handleClose, 2000);\n    });\n  }\n\n  handleSearchTextChange(event) {\n    const text = event.target.value;\n    this.filterResults(text);\n  }\n\n  filterResults(text) {\n    this.setState({ showFiltered: !!text.trim() }, () => {\n      const filteredData = this.state.collectionData.filter((collection) => {\n        const upperCaseText = text.toUpperCase();\n        return (\n          collection.symbol.toUpperCase().includes(upperCaseText) ||\n          collection.trade_price.toUpperCase().includes(upperCaseText) ||\n          collection.trade_location.toUpperCase().includes(upperCaseText) ||\n          collection.quote_region.toUpperCase().includes(upperCaseText) ||\n          collection.timestamp.toUpperCase().includes(upperCaseText) ||\n          collection.trade_strategy.toUpperCase().includes(upperCaseText) ||\n          collection.trade_type.toUpperCase().includes(upperCaseText)\n        )\n      });\n      this.setState({ filteredData: filteredData });\n    });\n  }\n\n  renderCharts(chartNum) {\n    const { timestamp, ma, close } = this.state[chartNum];\n\n    const price = close[close.length - 1] || 0;\n    const priceInDecimal = convertToDecimal(price);\n    \n    let heading, subheading, priceLabel;\n    switch (chartNum) {\n      case CHART1:\n        heading = 'BTC-USD'\n        subheading = 'Coinbase Pro'\n        priceLabel = `$${priceInDecimal}`;\n        break;\n      case CHART2:\n        heading = 'BTC-EUR'\n        subheading = 'BitStamp'\n        priceLabel = `€${priceInDecimal}`;\n        break;\n      default:\n        heading = 'BTC-JPY'\n        subheading = 'Bitflyer'\n        priceLabel = `¥${priceInDecimal}`\n        break;\n    }\n\n    const chartLayout = {\n      margin: this.state.width >= 1920 ? { t: 10} : {\n        t: 5,\n        b: 5,\n        l: 40,\n        r: 5,\n        pad: 0\n      },\n      font: {\n        size: this.state.width >= 1920 ? 12 : 6,\n      },\n      showlegend: false,\n      title: undefined,\n      paper_bgcolor: \"transparent\",\n      plot_bgcolor: \"transparent\",\n      xaxis: {\n        showticklabels: this.state.width >= 1920,\n        tickfont: {\n          color: 'white'\n        },\n        showgrid: true,\n        gridcolor: \"#535968\", // mm-gray-600\n        fixedrange: false,\n        zerolinecolor: \"#535968\", // mm-gray-600\n      },\n      yaxis: {\n        tickfont: {\n          color: 'white'\n        },\n        showgrid: true,\n        gridcolor: \"#535968\",\n        fixedrange: false,\n        zerolinecolor: \"#535968\" // mm-gray-600\n      }\n    };\n\n    const chartData = getChartData(timestamp, ma, close);\n\n    return (\n      <div key={chartNum} className=\"h-full flex flex-col text-white pb-[13px] 3xl:pb-[20px] 8xl:pb-[30px]\">\n        {/* Title */}\n        <div className=\"grow bg-mm-gray-800 border border-mm-gray-600 font-extrabold leading-[21px] 3xl:leading-[32px] 8xl:leading-[48px] pl-[11px] 3xl:pl-[16px] 8xl:pl-[24px] pt-[8px] 3xl:pt-[12px] 8xl:pt-[18px] rounded-t-lg text-[14px] 3xl:text-[21px] 8xl:text-[32px]\">\n          {heading}\n          <span className=\"font-medium leading-[21px] 3xl:leading-[32px] 8xl:leading-[48px] text-[12px] 3xl:text-[18px] 8xl:text-[27px]\">\n            &nbsp;{subheading}\n          </span>\n\n          <div className=\"mt-[8px] w-[380px] h-[180px] 3xl:mt-[12px] 3xl:w-[500px] 3xl:h-[260px] 4xl:mt-[16px] 4xl:w-[700px] 4xl:h-[460px] 8xl:mt-[24px] 8xl:w-[1000px] 8xl:h-[700px]\">\n            {/* Chart */}\n            <Plot\n              key={chartNum.toString()}\n              data={chartData}\n              layout={chartLayout}\n              useResizeHandler={true}\n              style={{ width: \"100%\", height: \"100%\" }}\n              config={{displayModeBar: false}}\n            />\n          </div>\n\n        </div>\n\n        {/* Price */}\n        <div className=\"bg-mm-gray-800/60 border border-mm-gray-600 font-semibold font-source-code-pro py-[21px] 3xl:py-[32px] 8xl:py-[48px] rounded-b-lg text-[32px] 3xl:text-[48px] 8xl:text-[72px] text-center\">\n          {priceLabel}\n        </div>\n      </div>\n    );\n  }\n\n  renderRegionModal() {\n    const { regionModal, availableRegions, selectedRegionUrl } = this.state;\n    return (\n      <Dialog\n        fullWidth\n        open={regionModal}\n      >\n        <DialogTitle id=\"form-dialog-title\">Select Region:</DialogTitle>\n        <DialogContent>\n          <RadioGroup\n            onChange={event => {\n              const { target: { value, labels } } = event;\n              this.setState({ selectedRegionUrl: value, selectedRegionName: labels[0].outerText });\n            }}\n            value={selectedRegionUrl}\n          >\n            {\n              availableRegions.map(region => {\n                let { locationInfo: { city, countrycode }, tags: { url } } = region;\n\n                // This is quick fix for Singapore region\n                if (countrycode === \"SG\") {\n                  city = \"Singapore\";\n                }\n\n                const label = `${city}, ${countrycode}`;\n                return <FormControlLabel key={label} value={url} control={<Radio />} label={label} />\n              })\n            }\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={!selectedRegionUrl}\n            onClick={() => this.setState({ regionModal: false }, () => { this.selectedRegionLogin() })}\n            size=\"small\" variant=\"text\" color=\"primary\">\n            <span className=\"actions\">CONFIRM</span>\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderLoginModal() {\n\n    let { loginModal } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Dialog\n        fullWidth\n        open={loginModal}\n      >\n        <DialogTitle id=\"form-dialog-title\"> Please login with defaults or use your own account:</DialogTitle>\n        <DialogContent style={{ display: 'flex', flexDirection: 'column', maxWidth: '300px' }}>\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Federation URL\"\n            defaultValue={this.state.federationUrl}\n\n            onChange={(event) => {\n              const federationUrl = event.target.value;\n              this.setState({ federationUrl });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Email\"\n            defaultValue={this.state.email}\n\n            onChange={(event) => {\n              const email = event.target.value;\n              this.setState({ email });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Fabric\"\n            defaultValue={this.state.fabric}\n\n            onChange={(event) => {\n              const fabric = event.target.value;\n              this.setState({ fabric });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField type='password'\n            id=\"pass\"\n            label=\"Password\"\n            defaultValue={this.state.password}\n            InputProps={{\n              className: classes.input\n            }}\n            onChange={(event) => {\n              const password = event.target.value;\n              this.setState({ password });\n\n            }}\n            margin=\"normal\"\n          />\n        </DialogContent>\n\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({\n              loginModal: false,\n            }, () => { this.login() })}\n            size=\"small\" variant=\"text\" color=\"primary\">\n            <span className=\"actions\">CONFIRM</span>\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  render() {\n    const { showFiltered, collectionData, filteredData, showSnackbar, snackbarText } = this.state;\n    const { classes } = this.props;\n    const collection = showFiltered ? filteredData : collectionData;\n    return (\n      <div>\n        <div className=\"bg-mm-gray-900 grid px-[12px] 3xl:px-0 3xl:grid-cols-12\">\n          <div className=\"3xl:col-start-2 3xl:col-end-12\">\n            <div className=\"lg:h-screen\">\n              {/* Header */}\n              <div className=\"bg-transparent flex flex-row justify-between items-center h-[40px] 3xl:h-[64px] 8xl:h-[96px] text-white\">\n                <img className=\"w-[100px] h-[27px] 3xl:w-[150px] 3xl:h-[40px] 8xl:w-[225px] 8xl:h-[60px]\" src={Logomark} alt=\"Macrometa Logo\"/>\n                <button className=\"border border-mm-gray-600 font-medium inline-flex items-center justify-center leading-[16px] 3xl:leading-[24px] 8xl:leading-[36px] my-[8px] 3xl:my-[12px] 8xl:my-[18px] rounded-lg text-[11px] 3xl:text-[16px] 8xl:text-[24px] w-[100px] 3xl:w-[150px] 8xl:w-[225px] h-[27px] 3xl:h-[40px] 8xl:h-[60px] text-center\">\n                  {/* map-pin svg icon  */}\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"w-[13px] h-[13px] 3xl:w-[20px] 3xl:h-[20px] 8xl:w-[30px] 8xl:h-[30px] text-mm-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 10.5a3 3 0 11-6 0 3 3 0 016 0z\" />\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z\" />\n                  </svg>\n                  <span>&nbsp;{this.state.selectedRegionName || \"Region\"}</span>\n                </button>\n              </div>\n\n              <div className=\"grid lg:grid-rows-2 h-[calc(100vh-40px)] 3xl:h-[calc(100vh-64px)] 8xl:h-[calc(100vh-96px)] \">\n                {/* Charts */}\n                <div className=\"grid lg:grid-cols-3 gap-4\">\n                  {[CHART1, CHART2, CHART3].map((i) => this.renderCharts(i))}\n                </div>\n\n                {/* Trades Table */}\n                <TradesTable trades={collection} onChangeFilter={this.handleSearchTextChange}/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Snackbar\n          open={showSnackbar}\n          onClose={this.handleClose}\n          message={<span id=\"message-id\">{snackbarText}</span>}\n        />\n\n        {this.renderLoginModal()}\n\n        {this.state.regionModal && this.renderRegionModal()}\n\n      </div>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: '#404040',\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: '100%'\n  },\n  tableHead: {\n    backgroundColor: BACKGROUND,\n    color: 'white'\n  },\n  tableBody: {\n    backgroundColor: BACKGROUND\n  },\n  headCell: {\n    color: 'white',\n    fontSize: '0.75em',\n    textAlign: 'center',\n    borderBottom: 'none'\n  },\n  tableCell: {\n    fontWeight: 700,\n    textAlign: 'center',\n    borderBottom: 'none',\n    fontSize: '16px'\n  },\n  input: {\n    backgroundColor: '#404040',\n    paddingLeft: '5px'\n  },\n\n});\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}