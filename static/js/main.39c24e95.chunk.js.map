{"version":3,"sources":["logo.svg","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CONSTANTS","CHART_SIGNS","CHART1_SIGN","getSymbolFromCurrency","CHART2_SIGN","CHART3_SIGN","getRandomInt","Math","floor","random","getQuoteStreamTopicName","name","concat","convertTimestampToDate","timestamp","unixTime","parseFloat","date","Date","toUTCString","index","indexOf","substring","trim","makeChartData","response","oldData","close","ma","newChart","_","cloneDeep","push","time","lastIndexOf","substr","getChartData","X","Y1","Y2","x","y","type","marker","color","convertToDecimal","val","num","toString","includes","makeCollectionData","data","trade_location","newData","Object","objectSpread","symbol","trade_price","undefined","CHART1","CHART2","CHART3","BLUE","GREEN","BACKGROUND","App","props","_this$state","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","width","height","defineProperty","stream","updateWindowDimensions","bind","assertThisInitialized","establishConnection","handleClose","openSnackBar","handleSearchTextChange","jwtToken","fabric","collection","window","addEventListener","_this2","removeEventListener","forEach","chartNum","closeConnections","closeOnChangeConnection","charts","i","length","setState","_this$setState","getDocumentData","establishDocumentConnection","selectedRegionUrl","email","password","fabricName","Fabric","login","useFabric","initData","console","log","_context2","t0","federationUrl","res","get","deployedRegions","regions","options","dcList","split","tenantHandler","tenant","getTenantEdgeLocations","locations","dcInfo","availableRegions","filter","dcObject","regionModal","_context3","query","cursor","all","result","collectionData","dataArr","map","_context4","status","onChange","consumer","on","_this3","msg","receiveMsg","JSON","parse","payload","decodedMsg","atob","toConsumableArray","newElem","slice","streamTopic","getOtp","consumerOTP","otp","_this4","innerWidth","innerHeight","showSnackbar","snackbarText","message","_this5","setTimeout","event","text","target","value","filterResults","_this6","showFiltered","filteredData","upperCaseText","toUpperCase","quote_region","trade_strategy","trade_type","chartData","screenWidth","_this$state$chartNum","layout","showlegend","title","paper_bgcolor","plot_bgcolor","xaxis","tickfont","showgrid","gridcolor","fixedrange","zerolinecolor","yaxis","react_default","a","createElement","react_plotly_default","key","useResizeHandler","style","_this7","_this$state4","Dialog_default","fullWidth","open","DialogTitle_default","id","DialogContent_default","RadioGroup_default","_event$target","labels","selectedRegionName","outerText","region","_region$locationInfo","locationInfo","city","countrycode","url","tags","label","FormControlLabel_default","control","Radio_default","DialogActions_default","Button_default","disabled","onClick","selectedRegionLogin","size","variant","className","_this8","loginModal","classes","display","flexDirection","maxWidth","TextField_default","InputProps","input","defaultValue","margin","_this9","_this$state5","backgroundColor","marginTop","justifyContent","fontSize","renderCharts","padding","currVal","currentValue","decimalValue","getCurrentValue","flex","alt","src","logo","placeholder","root","Table_default","TableHead_default","tableHead","TableRow_default","TableCell_default","component","headCell","TableBody_default","tableBody","n","cellColor","tableCell","Snackbar_default","onClose","renderLoginModal","renderRegionModal","Component","withStyles","theme","marginLeft","spacing","unit","marginRight","textAlign","borderBottom","fontWeight","paddingLeft","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39c24e95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.596666c9.svg\";","import React from 'react';\nimport _ from 'lodash';\nimport getSymbolFromCurrency from 'currency-symbol-map';\nimport './App.css';\n\n\nexport const CONSTANTS = {\n    CHART1: 0,\n    CHART2: 1,\n    CHART3: 2,\n    BLUE: '#3B9DE6',\n    GREEN: '#A7CC55',\n    BACKGROUND: '#262626'\n};\n\nconst CHART_SIGNS = {\n    CHART1_SIGN:\n        getSymbolFromCurrency('USD'),\n    CHART2_SIGN:\n        getSymbolFromCurrency('EUR'),\n    CHART3_SIGN:\n        getSymbolFromCurrency('JPY')\n}\n\nexport function getRandomInt() {\n\n    return Math.floor(Math.random() * Math.floor(99999));\n\n}\n\nexport const getQuoteStreamTopicName = name => `CryptoTraderQuotesAvg${name}New`;\nexport const getCollectionName = () => 'trades';\n\nconst convertTimestampToDate = (timestamp) => {\n    let unixTime = (typeof timestamp === 'string') ? parseFloat(timestamp) : timestamp;\n    const date = new Date(unixTime * 1000).toUTCString();\n    const index = date.indexOf(\"GMT\");\n    const finalDate = date.substring(0, index).trim();\n    return finalDate;\n};\n\nexport const convertTimestampToProperTime = (timestamp) => {\n    const date = convertTimestampToDate(timestamp);\n    const index = date.lastIndexOf(' ');\n    return date.substr(index).trim();\n}\n\nexport const makeChartData = (response, oldData) => {\n    const { close, ma, timestamp } = response;\n    const newChart = _.cloneDeep(oldData);\n    newChart.close.push(close);\n    newChart.ma.push(ma);\n    const time = convertTimestampToDate(timestamp);\n    const index = time.lastIndexOf(' ');\n    newChart.timestamp.push(time.substr(index).trim());\n    return newChart;\n}\n\n\nexport const getChartData = (X, Y1, Y2) => {\n    //make traces\n    const trace1 = {\n        x: X,\n        y: Y1,\n        type: 'line',\n        marker: { color: CONSTANTS.BLUE },\n        name: 'ma'\n    }\n\n    const trace2 = {\n        x: X,\n        y: Y2,\n        type: 'line',\n        marker: { color: 'orange' },\n        name: 'price'\n    }\n\n    return [trace1, trace2];\n}\n\nconst convertToDecimal = (val) => {\n    const num = typeof val === 'string' ? val : val.toString();\n    const decimalRepresentation = num.includes('.') ? num : `${num}.00`;\n    return decimalRepresentation;\n}\n\nexport const getCurrentValue = (chartNum, currVal) => {\n\n    const { CHART1, CHART2 } = CONSTANTS;\n\n    let currentValue;\n    const decimalValue = convertToDecimal(currVal);\n    switch (chartNum) {\n        case CHART1:\n            currentValue = `${CHART_SIGNS.CHART1_SIGN}${decimalValue}`;\n            break;\n        case CHART2:\n            currentValue = `${CHART_SIGNS.CHART2_SIGN}${decimalValue}`;\n            break;\n        default:\n            currentValue = `${CHART_SIGNS.CHART3_SIGN}${decimalValue}`\n            break;\n    }\n\n    return (\n        <span key={chartNum} style={{ display: 'flex', justifyContent: 'space-around' }}>\n            <span className=\"currentValue\">Current Value</span>\n            <span className=\"currentValueText\">{currentValue}</span>\n        </span>\n    )\n}\n\nexport const makeCollectionData = (data) => {\n    let newData = { ...data };\n    let trade_location;\n    const { symbol } = newData;\n    if (symbol) {\n        if (symbol.includes(\"JPY\")) {\n            trade_location = \"Tokyo\";\n        } else if (symbol.includes(\"USD\")) {\n            trade_location = \"NYC\";\n        } else {\n            trade_location = \"Frankfurt\";\n        }\n        newData.trade_location = trade_location;\n        newData.trade_price = convertToDecimal(newData.trade_price);\n        newData.timestamp = convertTimestampToProperTime(newData.timestamp);\n    }\n    else {\n        newData = undefined;\n    }\n    return newData;\n}\n\nexport const makeCollectionArray = (dataArr) => {\n    const newDataArr = dataArr.map(makeCollectionData);\n    return newDataArr;\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Plot from 'react-plotly.js';\nimport _ from 'lodash';\nimport Fabric from 'jsc8';\n\nimport {\n  makeChartData,\n  getChartData,\n  getCurrentValue,\n  makeCollectionArray,\n  makeCollectionData,\n  CONSTANTS,\n  getQuoteStreamTopicName,\n  getCollectionName,\n  getRandomInt\n} from './utils';\n\nimport Table from '@material-ui/core/Table';\n\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst { CHART1, CHART2, CHART3, BLUE, GREEN, BACKGROUND } = CONSTANTS;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      [CHART1]: {\n        name: 'USD',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      [CHART2]: {\n        name: 'EUR',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      [CHART3]: {\n        name: 'JPY',\n        close: [],\n        ma: [],\n        timestamp: [],\n        stream: undefined\n      },\n      collectionData: [],\n      filteredData: [],\n      showSnackbar: false,\n      snackbarText: '',\n      showFiltered: false,\n      regionModal: false,\n      availableRegions: null,\n      selectedRegionUrl: null,\n      loginModal: true,\n      federationUrl: \"gdn.5g.macrometa.io\",\n      fabric: '_system',\n      email: \"demo@macrometa.io\",\n      password: 'Demo@macrometa.io',\n      selectedRegionName: null\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.establishConnection = this.establishConnection.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.openSnackBar = this.openSnackBar.bind(this);\n    this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n    this.jwtToken = undefined;\n    this.fabric = undefined;\n    this.collection = undefined;\n  }\n\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions)\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n\n    [CHART1, CHART2, CHART3].forEach(chartNum => {\n      this.state[chartNum].stream.closeConnections();\n    });\n\n    this.collection.closeOnChangeConnection();\n\n  }\n\n  async initData() {\n    let charts = [CHART1, CHART2, CHART3];\n    for (let i = 0; i < charts.length; i++) {\n      charts[i] = await this.establishConnection(i);\n    }\n\n    this.setState({\n      [CHART1]: charts[CHART1],\n      [CHART2]: charts[CHART2],\n      [CHART3]: charts[CHART3]\n    });\n    this.getDocumentData();\n    this.establishDocumentConnection();\n  }\n\n  async selectedRegionLogin() {\n    this.fabric.close();\n    const { selectedRegionUrl, email, password } = this.state;\n    const fabricName = this.state.fabric;\n    this.fabric = new Fabric(`https://${selectedRegionUrl}`);\n    try {\n      await this.fabric.login(email, password);\n      this.fabric.useFabric(fabricName);\n      // start streams and get collection data\n      await this.initData();\n    } catch (e) {\n      this.openSnackBar('Failed to login with selected region.');\n      console.log(e);\n    }\n  }\n\n  async login() {\n    const { federationUrl, email, password } = this.state;\n    const fabricName = this.state.fabric;\n    this.fabric = new Fabric(`https://${federationUrl}`);\n    try {\n      const res = await this.fabric.login(email, password);\n      this.fabric.useFabric(fabricName);\n      const deployedRegions = await this.fabric.get();\n      const regions = deployedRegions.options.dcList.split(\",\");\n      const tenantHandler = this.fabric.tenant(\"\", res.tenant);\n      const locations = await tenantHandler.getTenantEdgeLocations();\n      const { dcInfo } = locations[0];\n      const availableRegions = dcInfo.filter((dcObject) => {\n        return regions.indexOf(dcObject.name > -1);\n      })\n      // const tempAvailableRegions = availableRegions.filter(\n      //   (availableRegion) => availableRegion.name !== \"gdn1-sfo2\"\n      // );\n\n      this.setState({\n        availableRegions,\n        regionModal: true,\n      });\n    } catch (e) {\n      this.openSnackBar('Auth failed.');\n      console.log(e);\n    }\n  }\n\n  async getDocumentData() {\n    try {\n      const cursor = await this.fabric.query(\"FOR trade IN trades SORT trade.timestamp DESC LIMIT 20 RETURN trade\");\n      const result = await cursor.all();\n      this.setState({ collectionData: makeCollectionArray(result) });\n    } catch (e) {\n      e.status !== 404 && this.openSnackBar('Could not get document data');\n    }\n\n  }\n\n  async establishDocumentConnection() {\n\n    const collectionName = getCollectionName();\n    this.collection = this.fabric.collection(collectionName);\n    const consumer = await this.collection.onChange(\n      this.state.selectedRegionUrl,\n      `${collectionName}-sub${getRandomInt()}`\n    );\n\n    consumer.on(\"error\", () => {\n      this.openSnackBar('Failed to establish WS connection for trades');\n      console.log('Failed to establish WS connection for trades');\n    });\n\n    consumer.on(\"message\", (msg) => {\n      const receiveMsg = JSON.parse(msg);\n        const { payload } = receiveMsg;\n        if (receiveMsg && payload) {\n          const decodedMsg = atob(payload);\n          const response = decodedMsg && JSON.parse(decodedMsg);\n          let collectionData = [...this.state.collectionData];\n          const newElem = makeCollectionData(response);\n          if (newElem) {\n            collectionData = [newElem, ...collectionData];\n          }\n          if (collectionData.length > 20) {\n            //remove more than 20 data points\n            collectionData = collectionData.slice(0, 20);\n          }\n          this.setState({ collectionData });\n        }\n    });\n\n    consumer.on(\"close\", () => {\n      console.log('Closing WS connection for trades');\n    });\n\n    consumer.on(\"open\", () => {\n      console.log(\"WebSocket is open for trades\");\n    });\n\n    // this.collection.onChange({\n    //   onopen: () => console.log(\"WebSocket is open for trades\"),\n    //   onclose: () => console.log('Closing WS connection for trades'),\n    //   onerror: () => {\n    //     this.openSnackBar('Failed to establish WS connection for trades');\n    //     console.log('Failed to establish WS connection for trades');\n    //   },\n    //   onmessage: message => {\n    //     const receiveMsg = JSON.parse(message);\n    //     const { payload } = receiveMsg;\n    //     if (receiveMsg && payload) {\n    //       const decodedMsg = atob(payload);\n    //       const response = decodedMsg && JSON.parse(decodedMsg);\n    //       let collectionData = [...this.state.collectionData];\n    //       const newElem = makeCollectionData(response);\n    //       if (newElem) {\n    //         collectionData = [newElem, ...collectionData];\n    //       }\n    //       if (collectionData.length > 20) {\n    //         //remove more than 20 data points\n    //         collectionData = collectionData.slice(0, 20);\n    //       }\n    //       this.setState({ collectionData });\n    //     }\n\n\n    //   }\n    // }, this.state.selectedRegionUrl, `${collectionName}-sub${getRandomInt()}`);\n  }\n\n  async establishConnection(chartNum) {\n    const newChart = _.cloneDeep(this.state[chartNum]);\n    const { name } = this.state[chartNum];\n    const streamTopic = getQuoteStreamTopicName(name);\n    const stream = this.fabric.stream(streamTopic, false);\n    const consumerOTP = await stream.getOtp();\n    const consumer = stream.consumer(`${name}-sub${getRandomInt()}`,\n      this.state.selectedRegionUrl, {\n        otp: consumerOTP,\n      });\n\n    consumer.on(\"error\", () => {\n      this.openSnackBar('Failed to establish WS connection');\n      console.log(`Failed to establish WS connection for ${streamTopic}`);\n    });\n\n    consumer.on(\"message\", (msg) => {\n      const receiveMsg = JSON.parse(msg);\n      const { payload } = receiveMsg;\n      if (receiveMsg && payload) {\n        const decodedMsg = atob(payload);\n        const response = decodedMsg && JSON.parse(decodedMsg);\n        console.log(\"CHART CONSUMER MSG:\", response);\n        this.setState({ [chartNum]: makeChartData(response, this.state[chartNum]) });\n      }\n    });\n\n    consumer.on(\"close\", () => {\n      console.log(`Closing WS connection for ${streamTopic}`)\n    });\n\n    consumer.on(\"open\", () => {\n      console.log(`Connection open for ${streamTopic}`)\n    });\n\n    /*\n    stream.consumer(`${name}-sub${getRandomInt()}`,this.state.selectedRegionUrl, {\n      onerror: () => {\n        this.openSnackBar('Failed to establish WS connection');\n        console.log(`Failed to establish WS connection for ${streamTopic}`);\n      },\n      onclose: () => console.log(`Closing WS connection for ${streamTopic}`),\n      onopen: () => console.log(`Connection open for ${streamTopic}`),\n      onmessage: (message) => {\n        const receiveMsg = JSON.parse(message);\n        const { payload } = receiveMsg;\n        if (receiveMsg && payload) {\n          const decodedMsg = atob(payload);\n          const response = decodedMsg && JSON.parse(decodedMsg);\n          console.log(\"CHART CONSUMER MSG:\", response);\n          this.setState({ [chartNum]: makeChartData(response, this.state[chartNum]) });\n        }\n      }\n    })*/;\n\n    newChart.stream = stream;\n\n    return newChart;\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  handleClose() {\n    this.setState({ showSnackbar: false, snackbarText: '' });\n  }\n\n  openSnackBar(message) {\n    this.setState({ showSnackbar: true, snackbarText: message }, () => {\n      setTimeout(this.handleClose, 2000);\n    });\n  }\n\n  handleSearchTextChange(event) {\n    const text = event.target.value;\n    this.filterResults(text);\n  }\n\n  filterResults(text) {\n    this.setState({ showFiltered: !!text.trim() }, () => {\n      const filteredData = this.state.collectionData.filter((collection) => {\n        const upperCaseText = text.toUpperCase();\n        return (\n          collection.symbol.toUpperCase().includes(upperCaseText) ||\n          collection.trade_price.toUpperCase().includes(upperCaseText) ||\n          collection.trade_location.toUpperCase().includes(upperCaseText) ||\n          collection.quote_region.toUpperCase().includes(upperCaseText) ||\n          collection.timestamp.toUpperCase().includes(upperCaseText) ||\n          collection.trade_strategy.toUpperCase().includes(upperCaseText) ||\n          collection.trade_type.toUpperCase().includes(upperCaseText)\n        )\n      });\n      this.setState({ filteredData: filteredData });\n    });\n  }\n\n  renderCharts(chartNum) {\n    const screenWidth = this.state.width;\n    const { timestamp, ma, close } = this.state[chartNum];\n    let chartData;\n    const layout = {\n      showlegend: false,\n      title: undefined,\n      paper_bgcolor: BACKGROUND,\n      plot_bgcolor: BACKGROUND,\n      width: screenWidth / 3,\n      height: 350,\n      xaxis: {\n        tickfont: {\n          color: 'white'\n        },\n        showgrid: true,\n        gridcolor: '#6b6a6a',\n        fixedrange: false,\n        zerolinecolor: '#6b6a6a'\n      },\n      yaxis: {\n        tickfont: {\n          color: 'white'\n        },\n        showgrid: true,\n        gridcolor: '#6b6a6a',\n        fixedrange: false,\n        zerolinecolor: '#6b6a6a'\n      }\n    };\n    switch (chartNum) {\n      case CHART1:\n        chartData = getChartData(timestamp, ma, close);\n        layout.title = '<b style=\"color:white\">BTC-USD @ Coinbase Pro</b>';\n        break;\n      case CHART2:\n        chartData = getChartData(timestamp, ma, close);\n        layout.title = '<b style=\"color:white\">BTC-EUR @ BitStamp</b>';\n        break;\n      default:\n        chartData = getChartData(timestamp, ma, close);\n        layout.title = '<b style=\"color:white\">BTC-JPY @ Bitflyer</b>';\n        break;\n    }\n\n    return (\n      <Plot\n        key={chartNum.toString()}\n        data={chartData}\n        layout={layout}\n        useResizeHandler={true}\n        style={{ height: '350px' }}\n      />\n    );\n  }\n\n  renderRegionModal() {\n    const { regionModal, availableRegions, selectedRegionUrl } = this.state;\n    return (\n      <Dialog\n        fullWidth\n        open={regionModal}\n      >\n        <DialogTitle id=\"form-dialog-title\">Select Region:</DialogTitle>\n        <DialogContent>\n          <RadioGroup\n            onChange={event => {\n              const { target: { value, labels } } = event;\n              this.setState({ selectedRegionUrl: value, selectedRegionName: labels[0].outerText });\n            }}\n            value={selectedRegionUrl}\n          >\n            {\n              availableRegions.map(region => {\n                const { locationInfo: { city, countrycode }, tags: { url } } = region;\n                const label = `${city}, ${countrycode}`;\n                return <FormControlLabel key={label} value={url} control={<Radio />} label={label} />\n              })\n            }\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={!selectedRegionUrl}\n            onClick={() => this.setState({ regionModal: false }, () => { this.selectedRegionLogin() })}\n            size=\"small\" variant=\"text\" color=\"primary\">\n            <span className=\"actions\">CONFIRM</span>\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderLoginModal() {\n\n    let { loginModal } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Dialog\n        fullWidth\n        open={loginModal}\n      >\n        <DialogTitle id=\"form-dialog-title\"> Please login with defaults or use your own account:</DialogTitle>\n        <DialogContent style={{ display: 'flex', flexDirection: 'column', maxWidth: '300px' }}>\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Federation URL\"\n            defaultValue={this.state.federationUrl}\n\n            onChange={(event) => {\n              const federationUrl = event.target.value;\n              this.setState({ federationUrl });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Email\"\n            defaultValue={this.state.email}\n\n            onChange={(event) => {\n              const email = event.target.value;\n              this.setState({ email });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField\n            InputProps={{\n              className: classes.input\n            }}\n            label=\"Fabric\"\n            defaultValue={this.state.fabric}\n\n            onChange={(event) => {\n              const fabric = event.target.value;\n              this.setState({ fabric });\n            }}\n            margin=\"normal\"\n          />\n\n          <TextField type='password'\n            id=\"pass\"\n            label=\"Password\"\n            defaultValue={this.state.password}\n            InputProps={{\n              className: classes.input\n            }}\n            onChange={(event) => {\n              const password = event.target.value;\n              this.setState({ password });\n\n            }}\n            margin=\"normal\"\n          />\n        </DialogContent>\n\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({\n              loginModal: false,\n            }, () => { this.login() })}\n            size=\"small\" variant=\"text\" color=\"primary\">\n            <span className=\"actions\">CONFIRM</span>\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  render() {\n    const { showFiltered, collectionData, filteredData, showSnackbar, snackbarText } = this.state;\n    const { classes } = this.props;\n    const collection = showFiltered ? filteredData : collectionData;\n    return (\n      <div className=\"App\">\n        <div className=\"Region\" style={{ backgroundColor: 'black', marginTop: '10px', display: 'flex', justifyContent: \"center\" }} >\n          <span style={{ color: 'grey', fontSize: '18px' }}>Selected Region :  {this.state.selectedRegionName}   </span>\n        </div>\n\n        <div className=\"row\" style={{ backgroundColor: 'black', marginTop: '10px' }}>\n          {\n            [CHART1, CHART2, CHART3].map(\n              (chartNum) => {\n                return this.renderCharts(chartNum);\n              }\n            )\n          }\n        </div>\n        <div className=\"row\" style={{ justifyContent: ' space-around', padding: '30px 0 30px 0 ', backgroundColor: 'black' }}>\n          {\n            [CHART1, CHART2, CHART3].map(\n              (chartNum) => {\n                const { close } = this.state[chartNum];\n                const currentValue = close[close.length - 1] || 0;\n                return getCurrentValue(chartNum, currentValue);\n              }\n            )\n          }\n        </div>\n        <div className=\"row\" style={{ flex: 1 }}>\n          <div className=\"leftPane\">\n            <img alt=\"Macrometa\" style={{ height: '64px', marginTop: '15px' }} src={logo} />\n            <div className=\"textField\" >\n              <TextField\n                label=\"Filter\"\n                placeholder=\"Enter here\"\n                onChange={this.handleSearchTextChange}\n                classes={{\n                  root: classes.root\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n\n            </div>\n          </div>\n          <div className=\"tableContainer\">\n            <Table>\n              <TableHead\n                className={classes.tableHead}>\n                <TableRow>\n                  <TableCell component=\"th\" className={classes.headCell}>Symbol</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Price</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Location</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Region</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Timestamp</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Strategy</TableCell>\n                  <TableCell component=\"th\" className={classes.headCell}>Type</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody\n                className={classes.tableBody}>\n                {\n                  collection.map((n) => {\n                    const shouldBuy = n.trade_type.includes(\"BUY\");\n                    const cellColor = shouldBuy ? BLUE : GREEN;\n                    return (\n                      <TableRow key={Math.random()}>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.symbol}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.trade_price}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.trade_location}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.quote_region}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.timestamp}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.trade_strategy}</TableCell>\n                        <TableCell className={classes.tableCell} style={{ color: cellColor }}>{n.trade_type}</TableCell>\n                      </TableRow>\n                    );\n                  })\n                }\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n        <Snackbar\n          open={showSnackbar}\n          onClose={this.handleClose}\n          message={<span id=\"message-id\">{snackbarText}</span>}\n        />\n\n        {this.renderLoginModal()}\n\n        {this.state.regionModal && this.renderRegionModal()}\n\n      </div>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: '#404040',\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: '100%'\n  },\n  tableHead: {\n    backgroundColor: BACKGROUND,\n    color: 'white'\n  },\n  tableBody: {\n    backgroundColor: BACKGROUND\n  },\n  headCell: {\n    color: 'white',\n    fontSize: '0.75em',\n    textAlign: 'center',\n    borderBottom: 'none'\n  },\n  tableCell: {\n    fontWeight: 700,\n    textAlign: 'center',\n    borderBottom: 'none',\n    fontSize: '16px'\n  },\n  input: {\n    backgroundColor: '#404040',\n    paddingLeft: '5px'\n  },\n\n});\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}